import SignStreamProcessor from '~/utils/SignStreamProcessor.js'

describe('SignStreamProcessor', () => {

  let processor
  beforeEach(() => {
    processor = new SignStreamProcessor();
  })

  it('should be constructable', () => {
    expect(processor instanceof SignStreamProcessor).to.equal(true);
  })

  it('should process an array of objects', done => {

    // I do not have any sign stream data on hand that spans multiple
    // columns, so lines 26 and 34–38 in SignStreamProcessor.js will
    // not be tested.  We should find a case to test this in the future.
    const unprocessedSignStream = [{"col_id":9967,"sign":"","line_id":45821,"line_name":"1","readability":"COMPLETE","next_sign_id":1349751,"sign_id":1349750,"is_reconstructed":1,"is_retraced":0,"is_variant":0,"break_type":null,"col_name":"col. 1a","prev_sign_id":1349749},{"line_id":45821,"readability":"COMPLETE","next_sign_id":1349752,"line_name":"1","col_id":9967,"sign":"","is_retraced":0,"is_reconstructed":1,"sign_id":1349751,"prev_sign_id":1349750,"break_type":null,"is_variant":0,"col_name":"col. 1a"},{"sign":"ב","col_id":9967,"next_sign_id":1349753,"readability":"COMPLETE","line_name":"1","line_id":45821,"is_reconstructed":1,"sign_id":1349752,"is_retraced":0,"col_name":"col. 1a","is_variant":0,"break_type":null,"prev_sign_id":1349751},{"prev_sign_id":1349752,"col_name":"col. 1a","break_type":null,"is_variant":0,"readability":"COMPLETE","line_name":"1","next_sign_id":1349754,"line_id":45821,"sign":"ש","col_id":9967,"is_retraced":0,"is_reconstructed":1,"sign_id":1349753},{"prev_sign_id":1349753,"break_type":null,"is_variant":0,"col_name":"col. 1a","line_id":45821,"next_sign_id":1349755,"readability":"COMPLETE","line_name":"1","col_id":9967,"sign":"י","is_retraced":0,"is_reconstructed":1,"sign_id":1349754},{"is_retraced":0,"sign_id":1349755,"is_reconstructed":1,"next_sign_id":1349756,"readability":"COMPLETE","line_name":"1","line_id":45821,"sign":"ל","col_id":9967,"prev_sign_id":1349754,"col_name":"col. 1a","is_variant":0,"break_type":null},{"is_retraced":null,"sign_id":1349756,"is_reconstructed":null,"readability":null,"next_sign_id":1349757,"line_name":"1","line_id":45821,"sign":"ה","col_id":9967,"prev_sign_id":1349755,"col_name":"col. 1a","break_type":null,"is_variant":0},{"next_sign_id":1349758,"readability":null,"line_name":"1","line_id":45821,"sign":"","col_id":9967,"is_retraced":null,"sign_id":1349757,"is_reconstructed":null,"prev_sign_id":1349756,"col_name":"col. 1a","break_type":null,"is_variant":0},{"sign":"ו","col_id":9967,"next_sign_id":1349759,"readability":null,"line_name":"1","line_id":45821,"is_reconstructed":null,"sign_id":1349758,"is_retraced":null,"col_name":"col. 1a","is_variant":0,"break_type":null,"prev_sign_id":1349757},{"prev_sign_id":1349758,"col_name":"col. 1a","break_type":null,"is_variant":0,"is_retraced":null,"is_reconstructed":null,"sign_id":1349759,"next_sign_id":1349760,"readability":null,"line_name":"1","line_id":45821,"sign":"א","col_id":9967},{"is_retraced":0,"is_reconstructed":1,"sign_id":1349760,"line_id":45821,"line_name":"1","readability":"COMPLETE","next_sign_id":1349761,"col_id":9967,"sign":"ח","prev_sign_id":1349759,"break_type":null,"is_variant":0,"col_name":"col. 1a"},{"sign":"ר","col_id":9967,"readability":"COMPLETE","line_name":"1","next_sign_id":1349762,"line_id":45821,"sign_id":1349761,"is_reconstructed":1,"is_retraced":0,"col_name":"col. 1a","break_type":null,"is_variant":0,"prev_sign_id":1349760},{"col_name":"col. 1a","break_type":null,"is_variant":0,"prev_sign_id":1349761,"sign":"י","col_id":9967,"readability":"COMPLETE","next_sign_id":1349763,"line_name":"1","line_id":45821,"is_reconstructed":1,"sign_id":1349762,"is_retraced":0},{"col_name":"col. 1a","is_variant":0,"break_type":null,"prev_sign_id":1349762,"sign_id":1349763,"is_reconstructed":1,"is_retraced":0,"sign":"","col_id":9967,"line_name":"1","readability":"COMPLETE","next_sign_id":1349764,"line_id":45821},{"break_type":null,"is_variant":0,"col_name":"col. 1a","prev_sign_id":1349763,"sign_id":1349764,"is_reconstructed":1,"is_retraced":0,"col_id":9967,"sign":"","line_id":45821,"next_sign_id":1349765,"readability":"COMPLETE","line_name":"1"},{"col_name":"col. 1a","is_variant":0,"break_type":null,"prev_sign_id":1349764,"sign_id":1349765,"is_reconstructed":1,"is_retraced":0,"sign":"","col_id":9967,"next_sign_id":1349766,"readability":"COMPLETE","line_name":"1","line_id":45821},{"is_retraced":null,"is_reconstructed":null,"sign_id":1349766,"next_sign_id":null,"readability":null,"line_name":"1","line_id":45821,"sign":"","col_id":9967,"prev_sign_id":1349765,"col_name":"col. 1a","is_variant":0,"break_type":"LINE_END,COLUMN_END"}]
    processor.streamToTree(unprocessedSignStream, 'prevKey', 'mainKey', 'nextKey')
      .then(tree => {
        const expectedTree = {"cols":[{"col":"col. 1a","lines":[{"line":"1","lineId":45821,"signs":[{"id":1349750,"is_variant":0,"break_type":null,"sign":"·","is_reconstructed":1,"readability":"COMPLETE","is_retraced":0,"prev_sign":1349749,"next_sign":1349751},{"id":1349751,"is_variant":0,"break_type":null,"sign":"·","is_reconstructed":1,"readability":"COMPLETE","is_retraced":0,"prev_sign":1349750,"next_sign":1349752},{"id":1349752,"is_variant":0,"break_type":null,"sign":"ב","is_reconstructed":1,"readability":"COMPLETE","is_retraced":0,"prev_sign":1349751,"next_sign":1349753},{"id":1349753,"is_variant":0,"break_type":null,"sign":"ש","is_reconstructed":1,"readability":"COMPLETE","is_retraced":0,"prev_sign":1349752,"next_sign":1349754},{"id":1349754,"is_variant":0,"break_type":null,"sign":"י","is_reconstructed":1,"readability":"COMPLETE","is_retraced":0,"prev_sign":1349753,"next_sign":1349755},{"id":1349755,"is_variant":0,"break_type":null,"sign":"ל","is_reconstructed":1,"readability":"COMPLETE","is_retraced":0,"prev_sign":1349754,"next_sign":1349756},{"id":1349756,"is_variant":0,"break_type":null,"sign":"ה","is_reconstructed":null,"readability":null,"is_retraced":null,"prev_sign":1349755,"next_sign":1349757},{"id":1349757,"is_variant":0,"break_type":null,"sign":"·","is_reconstructed":null,"readability":null,"is_retraced":null,"prev_sign":1349756,"next_sign":1349758},{"id":1349758,"is_variant":0,"break_type":null,"sign":"ו","is_reconstructed":null,"readability":null,"is_retraced":null,"prev_sign":1349757,"next_sign":1349759},{"id":1349759,"is_variant":0,"break_type":null,"sign":"א","is_reconstructed":null,"readability":null,"is_retraced":null,"prev_sign":1349758,"next_sign":1349760},{"id":1349760,"is_variant":0,"break_type":null,"sign":"ח","is_reconstructed":1,"readability":"COMPLETE","is_retraced":0,"prev_sign":1349759,"next_sign":1349761},{"id":1349761,"is_variant":0,"break_type":null,"sign":"ר","is_reconstructed":1,"readability":"COMPLETE","is_retraced":0,"prev_sign":1349760,"next_sign":1349762},{"id":1349762,"is_variant":0,"break_type":null,"sign":"י","is_reconstructed":1,"readability":"COMPLETE","is_retraced":0,"prev_sign":1349761,"next_sign":1349763},{"id":1349763,"is_variant":0,"break_type":null,"sign":"·","is_reconstructed":1,"readability":"COMPLETE","is_retraced":0,"prev_sign":1349762,"next_sign":1349764},{"id":1349764,"is_variant":0,"break_type":null,"sign":"·","is_reconstructed":1,"readability":"COMPLETE","is_retraced":0,"prev_sign":1349763,"next_sign":1349765},{"id":1349765,"is_variant":0,"break_type":null,"sign":"·","is_reconstructed":1,"readability":"COMPLETE","is_retraced":0,"prev_sign":1349764,"next_sign":1349766},{"id":1349766,"is_variant":0,"break_type":"LINE_END,COLUMN_END","sign":"·","is_reconstructed":null,"readability":null,"is_retraced":null,"prev_sign":1349765,"next_sign":null}]}]}]}
        // Fill in test cases: to assert that the structure is right
        expect(tree).to.equal(expectedTree)
        done()
      })
      .catch(e => {

        // Whoops :( this code is broken.
        done()
      })
  })

  // Consider if all edge cases of valid and reasonable invalid input can be covered with more tests

})